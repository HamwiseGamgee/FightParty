using System;
using System.Collections.Generic;

public class FoeType
{
    public string typeName;
    public bool isMagick;
    public double regenPower;
    public int typeSize;

    public FoeType(string startTypeName = "Normal", bool spellz = false, double healzz = 0.0, int bigNess = 1)
    {
        typeName = startTypeName;
        isMagick = spellz;
        regenPower = healzz;
        typeSize = bigNess;
    }

    // List of Types of Foes
    public static FoeType normal = new FoeType("Normal", false);
    public static FoeType bigNormal = new FoeType("Normal (But Large)", false, 0.0, 2);
    public static FoeType unDead = new FoeType("Undead", true, 0.1, 1);
}

public class Foe
{
    public int hp;
    public string name;
    public int def;
    public int str;
    public FoeType fighterType;

    public Foe(string startName, int health = 1, int defense = 0, int strength = 0, FoeType fightType = null)
    {
        name = startName;
        hp = health;
        def = defense;
        str = strength;
        fighterType = fightType ?? FoeType.normal;
    }
}

class Program
{
    static void Main()
    {
        while (true)
        {
            // Start the game loop
            Foe firstFighter = null;
            Foe secondFighter = null;

            Foe goblin = new Foe("Goblin", 7, 0, 2, FoeType.normal);
            Foe skeleton = new Foe("Skeleton", 4, 1, 2, FoeType.unDead);
            Foe giant = new Foe("Giant", 14, 1, 5, FoeType.bigNormal);
            Foe zombie = new Foe("Zombie", 5, 0, 1, FoeType.unDead);

            Dictionary<string, Foe> foes = new Dictionary<string, Foe>
            {
                { goblin.name.ToLower(), goblin },
                { skeleton.name.ToLower(), skeleton },
                { giant.name.ToLower(), giant },
                { zombie.name.ToLower(), zombie },
            };

            // Prompt the user to start the game
            Console.WriteLine("Welcome to the Battle Arena!");
            firstFighter = SelectFighter(foes);
            if (firstFighter == null) return;

            secondFighter = SelectFighter(foes);
            if (secondFighter == null) return;

            Battle(firstFighter, secondFighter, foes);
        }
    }

    static Foe SelectFighter(Dictionary<string, Foe> foes)
    {
        string fightAnswer = null;
        // Loop to ensure the user provides valid input
        while (true)
        {
            Console.WriteLine("Enter the name of your fighter (Goblin, Skeleton, Giant, Zombie), or type 'pussout' to quit:");
            fightAnswer = Console.ReadLine()?.Trim().ToLower();

            if (fightAnswer == "pussout") return null; // Exit if 'pussout' is chosen

            if (foes.ContainsKey(fightAnswer))
            {
                Foe selectedFoe = foes[fightAnswer];
                Console.WriteLine($"You selected {selectedFoe.name}!");
                return selectedFoe;
            }
            else
            {
                Console.WriteLine("Invalid fighter name. Please try again.");
            }
        }
    }

    static void Battle(Foe firstFighter, Foe secondFighter, Dictionary<string, Foe> foes)
    {
        // Continue the battle loop until one of the fighters dies
        while (firstFighter.hp > 0 && secondFighter.hp > 0)
        {
            Console.WriteLine($"It's time to fight! {firstFighter.name} vs {secondFighter.name}");
            Console.WriteLine("Type 'fight' to start the battle!");

            string response = Console.ReadLine()?.Trim().ToLower();
            if (response != "fight")
            {
                Console.WriteLine("Come on! Let them fight!");
                continue;
            }

            // First fighter attacks second fighter
            PerformAttack(firstFighter, secondFighter);

            if (secondFighter.hp > 0)
            {
                // Second fighter attacks first fighter if still alive
                PerformAttack(secondFighter, firstFighter);
            }

            // Print current HP
            Console.WriteLine($"{firstFighter.name} has {firstFighter.hp} HP left.");
            Console.WriteLine($"{secondFighter.name} has {secondFighter.hp} HP left.");

            if (firstFighter.hp == 0)
            {
                Console.WriteLine($"{firstFighter.name} has been defeated!");
                break;
            }
            else if (secondFighter.hp == 0)
            {
                Console.WriteLine($"{secondFighter.name} has been defeated!");
                break;
            }
        }

        // After the battle ends, reset the game state
        ResetGameState();
    }

    static void PerformAttack(Foe attacker, Foe defender)
    {
        int damage = CalculateDamage(attacker, defender);
        defender.hp = Math.Max(defender.hp - damage, 0);

        // Generate and print the attack description for the attacker
        string attackDescription = GenerateAttackDescription(attacker, defender);
        Console.WriteLine(attackDescription);
    }

    static int CalculateDamage(Foe attacker, Foe defender)
    {
        int damage = attacker.str - defender.def;
        return damage < 0 ? 0 : damage;
    }

    static string GenerateAttackDescription(Foe attacker, Foe defender)
    {
        Random rand = new Random();
        string[] attackDescriptions = new string[]
        {
            $"{defender.name} staggers back after the brutal blow from {attacker.name}!",
            $"{defender.name} grunts in pain as the attack from {attacker.name} lands!",
            $"{attacker.name}'s strike hits {defender.name} square in the chest!",
            $"{defender.name} is knocked off balance by the force of {attacker.name}'s attack!",
            $"{attacker.name} lunges and {defender.name} reels from the impact of the hit!"
        };

        return attackDescriptions[rand.Next(attackDescriptions.Length)];
    }

    static void ResetGameState()
    {
        // Prompt the user to choose fighters again after the battle ends
        Console.WriteLine("The battle is over. Returning to the fighter selection.");
    }
}
